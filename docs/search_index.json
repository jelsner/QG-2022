[["tuesday-september-19-2022.html", "Tuesday, September 19, 2022 Today Comparing distributions Box plots Long data frames Scatter plots Facets Example: Palmer penguins An expository graph Exporting your graph", " Tuesday, September 19, 2022 Today More about how to make graphs in R Comparing distributions CHECK OUT {ggdist} Previously you learned how to make a histogram from data. To review, consider again the Florida rainfall data. Import the data. loc &lt;- &quot;http://myweb.fsu.edu/jelsner/temp/data/FLprecip.txt&quot; FLp.df &lt;- readr::read_table(loc, na = &quot;-9.900&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## Year = col_double(), ## Jan = col_double(), ## Feb = col_double(), ## Mar = col_double(), ## Apr = col_double(), ## May = col_double(), ## Jun = col_double(), ## Jul = col_double(), ## Aug = col_double(), ## Sep = col_double(), ## Oct = col_double(), ## Nov = col_double(), ## Dec = col_double() ## ) Then use ggplot() and geom_histogram() functions to make a histogram of rainfall during March and add a label on the horizontal axis (x-axis). Here you assign the plot to an object called p1. An list object is created in your environment but nothing is plotted until you type the object name. library(ggplot2) p1 &lt;- ggplot(data = FLp.df) + geom_histogram(mapping = aes(x = Mar), bins = 11, fill = &quot;green3&quot;, col = &quot;white&quot;) + xlab(&quot;March Rainfall in Florida (in)&quot;) p1 The histogram shows the shape of the distribution. The distribution is made up of all 118 years of March rainfall. Most years have rainfall values between 2 and 4 inches. A few years have values that exceed 7.5 inches. The average, median, and standard deviations are obtained as follows: library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union FLp.df |&gt; select(Mar) |&gt; summarize(avg = mean(Mar), med = median(Mar), sd = sd(Mar), min = min(Mar), max = max(Mar)) ## # A tibble: 1 × 5 ## avg med sd min max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3.66 3.35 1.95 0.496 8.70 The average value is larger than the median value and the histogram is not symmetric. That is, the number of cases with with low rainfall exceeds the number of cases with heavy rainfall. The histogram helps us to describe the statistical distribution of the values. To see this, recall that you can generate values from any distribution. For example you generate values from a normal (Guassian distribution) with the rnorm() function by specifying the mean and the standard deviation. Here you do this using the mean and standard deviation from our rainfall values. Since there are 118 March rainfall values (one for each year) you set n = 118. nd &lt;- rnorm(n = 118, mean = 3.65, sd = 1.95) nd ## [1] 4.5891252 6.9878822 6.4966574 4.3500957 3.6034801 2.6120642 ## [7] 2.5770304 4.4577546 3.7869736 0.2925265 1.1300191 4.5863521 ## [13] 1.5841258 6.0327071 4.8792729 3.0378434 5.3440310 5.1199078 ## [19] 3.7619122 2.4326583 0.6637180 2.8015826 1.8184668 4.3177865 ## [25] 4.8885297 2.0968171 1.3329172 0.9257800 2.2641963 5.9623334 ## [31] 6.1095949 2.2061102 2.5260228 2.4894741 3.5779799 7.2976020 ## [37] -0.2513742 4.7220357 3.8531724 2.8419710 3.4818638 3.7958880 ## [43] 4.1382097 1.2306048 0.5790639 4.8628458 4.1617492 3.0882957 ## [49] 4.3447994 7.8175018 2.3618278 1.5468618 4.1681451 4.0548977 ## [55] 4.2259453 3.8075001 4.7582877 5.6842234 0.9221016 -0.2576500 ## [61] 2.9781210 5.8843360 4.4260219 -0.3416749 1.5984786 6.7700697 ## [67] 2.7142886 4.0075910 4.3090727 3.3126997 5.5923882 1.1490433 ## [73] 3.8002229 2.8883279 6.3649021 4.9021270 1.8557536 2.6426559 ## [79] 0.1512696 4.4635002 4.9017065 4.7844810 1.2760421 0.3820104 ## [85] 2.0836145 1.5985523 3.4455147 6.4609838 3.5406294 6.0649015 ## [91] 4.0114566 2.7506254 3.6447257 1.6589322 4.4678541 0.8547273 ## [97] 2.1407383 -0.5861533 3.0122102 0.4808737 9.0935549 3.3213405 ## [103] 4.2982462 2.0090838 1.8161855 2.4098774 0.7110599 3.0326073 ## [109] 4.5655876 5.7353858 5.0033649 2.3057385 6.5856067 4.5535086 ## [115] 4.6658856 3.7460706 -1.8180877 4.2920935 Collectively these values look quite a bit like the actual rainfall. Let’s make a histogram from these 118 values and assign it to p2. df &lt;- data.frame(nd) p2 &lt;- ggplot(data = df) + geom_histogram(mapping = aes(x = nd), bins = 11, col = &quot;white&quot;) + xlab(&quot;Gaussian Distribution&quot;) p2 Let’s do the same for a set of values from a uniform distribution and from a gamma distribution. ud &lt;- runif(n = 118, min = .5, max = 8.7) p3 &lt;- ggplot(data = df) + geom_histogram(mapping = aes(x = ud), bins = 11, col = &quot;white&quot;) + xlab(&quot;Uniform Distribution&quot;) gd &lt;- rgamma(n = 118, shape = 3.2, rate = .9) p4 &lt;- ggplot(data = df) + geom_histogram(mapping = aes(x = gd), bins = 11, col = &quot;white&quot;) + xlab(&quot;Gamma Distribution&quot;) Now put all four plots on a single graph. You do this with the {patchwork} package. The package gives operators like + and / different meanings when applied to ggplot objects. library(patchwork) (p1 + p2) / (p3 + p4) What distribution best matches the shape of the March rainfall values? Box plots A box plot graphically illustrates summary statistics. The summary statistics include the minimum value, the maximum value, the 1st &amp; 3rd quartile values, and the median value. A non-ggplot way to create a box plot is to use the function boxplot(). Here you get a box plot of the May rainfall. boxplot(FLp.df$May) The function boxplot() is from the base {graphics} package. Others from this package include hist() for histograms and plot() for scatter plots. The base graphics lets you manipulate details of a graph. For example: boxplot(FLp.df$May, ylab = &quot;May Rainfall in FL (in)&quot;) f &lt;- fivenum(FLp.df$May) text(rep(1.3, 5), f, labels = c(&quot;Minimum&quot;, &quot;1st Quartile&quot;, &quot;Median&quot;, &quot;3rd Quartile&quot;, &quot;Maximum&quot;)) text(1.3, 7.792, labels = &quot;Last Value Within\\n 1.5xIQR Above 3rd Q&quot;) The box plot illustrates the five numbers graphically. The median is the line through the box. The bottom and top of the box are the 1st and 3rd quartile values. Whiskers extend vertically from the box downward toward the minimum and upward toward the maximum. If values extend beyond 1.5 times the interquartile range (either above or below the corresponding quartile) the whisker is truncated at the last value within the range and points are used to indicate outliers. To make the same box plot using functions from the {ggplot2} package you use the geom_boxplot() layer. ggplot(data = FLp.df) + geom_boxplot(mapping = aes(y = May)) + xlab(&quot;&quot;) + ylab(&quot;May Rainfall in Florida (in)&quot;) Long data frames Suppose you want to make a separate box plot for each month. In this case you make the x aesthetic the name of a column containing the vector of month names. The problem is that the month names are column labels rather than a single character vector. You need to turn the data frame from its native ‘wide’ format to a ‘long’ format. The FLp.df is ‘wide’ because there are separate columns for each month. Wide data are more common because they are convenient for entering data and they let you see more of the data at one time. head(FLp.df) ## # A tibble: 6 × 13 ## Year Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1895 3.28 3.24 2.50 4.53 4.25 4.5 7.45 6.10 4.67 3.09 2.65 1.59 ## 2 1896 3.93 3.02 2.57 0.498 2.7 11.2 8.22 5.89 4.35 2.96 3.52 2.07 ## 3 1897 1.84 6 2.12 4.39 2.28 5.22 7.21 6.83 11.1 4.10 1.75 2.68 ## 4 1898 0.704 2.01 1.26 1.32 1.51 3.29 8.95 13.1 5.23 5.88 2.19 3.89 ## 5 1899 4.52 5.92 1.90 3.40 1.11 5.80 9.26 6.71 5.13 5.88 0.751 1.94 ## 6 1900 3.21 4.37 6.8 4.32 3.89 9.99 7.50 4.49 4.93 5.23 1.22 4.29 You can reduce the number of columns by stacking the rainfall values into a single column and then labeling the rows by month. This preserves all the information from the wide format but does so with fewer columns. The long data format is less familiar. It corresponds to the relational model for storing data used by databases like SQL. Consider the following wide data frame with column names w, x, y, and z. id w x y z 1 A C E G 2 B D F H The long data frame version would be id name value 1 w A 1 x C 1 y E 1 z G 2 w B 2 x D 2 y F 2 z H You use the pivot_longer() function from the {tidyr} package to turn the wide data frame into a long data frame. Let’s do it and then decipher what happens. library(tidyr) FLpL.df &lt;- FLp.df |&gt; pivot_longer(cols = -Year, names_to = &quot;Month&quot;, values_to = &quot;Rainfall&quot;) str(FLpL.df) ## tibble [1,404 × 3] (S3: tbl_df/tbl/data.frame) ## $ Year : num [1:1404] 1895 1895 1895 1895 1895 ... ## $ Month : chr [1:1404] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; ... ## $ Rainfall: num [1:1404] 3.28 3.24 2.5 4.53 4.25 ... The pivot_longer() function takes all the columns to pivot into a longer format. Here you chose them all EXCEPT the one named after the - sign (Year). All variables are measured (rainfall in units of inches) except Year. The resulting long data frame has the Year variable in the first column and the remaining column names as the name variable in the second column. You change the default name to Month by specifying the names_to = \"Month\" argument. The third column contains the corresponding rainfall values all in a single column names value. You change the default value by specifying the values_to = \"Rainfall\". Note that the column Month is a character vector. When you make a plot using this variable the order will be alphabetical. So you change the variable from a character vector to a factor vector with levels equal to the month abbreviations. month.abb ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; FLpL.df &lt;- FLpL.df |&gt; mutate(Month = factor(Month, levels = month.abb)) Note that you can reverse this with the pivot_wider() function. FLpW.df &lt;- FLpL.df |&gt; pivot_wider(id_cols = Year, names_from = Month, values_from = Rainfall) Then to create the box plot specify that the x aesthetic (x-axis) to be Month and the y-axis to be Rainfall. ggplot(data = FLpL.df) + geom_boxplot(mapping = aes(x = Month, y = Rainfall)) + ylab(&quot;Rainfall (in)&quot;) The graph shows the variation of rainfall by month. Each geom_ function is a layer. Data for the layer is specified in the function ggplot() with the data frame argument and the aes() function. To add another layer to the plot with different data you specify the data within the geom_ function. For example, lets repeat the graph of monthly rainfall highlighting the month of May. First you filter the data frame keeping only rows labeled May and assign this to a new data frame object called May.df. You then repeat the plot but add another geom_boxplot() layer that includes the argument data = May.df along with the corresponding aes() function. Finally you color the box green. May.df &lt;- FLpL.df |&gt; filter(Month == &quot;May&quot;) ggplot(data = FLpL.df, aes(x = Month, y = Rainfall)) + geom_boxplot() + ylab(&quot;Rainfall (in)&quot;) + geom_boxplot(data = May.df, mapping = aes(x = Month, y = Rainfall), fill = &quot;green&quot;) + theme_minimal() Scatter plots An import graph is the scatter plot which shows the relationship between two numeric variables. It plots the values of one variable against the values of the other as points \\((x_i, y_i)\\) in a Cartesian plane. For example, to show the relationship between April and September values of rainfall you type ggplot(FLp.df) + geom_point(mapping = aes(x = Apr, y = Sep)) + xlab(&quot;April Rainfall (in)&quot;) + ylab(&quot;September Rainfall (in)&quot;) The plot shows that dry Aprils tend to be followed by dry Septembers and wet Aprils tend to be followed by wet Septembers. There is a direct (or positive) relationship between the two variables although the points are scattered widely indicating the relationship is loose. If your goal is to model the relationship, you plot the dependent variable (the variable you are interested in modeling) on the vertical axis. Here you put the September values on the vertical axis since a predictive model would use April values to predict September values because April comes before September in the calendar year. If the points have a natural ordering then you use the geom_line() function. For example, to plot the September Rainfall values as a time series type ggplot(FLp.df) + geom_line(mapping = aes(x = Year, y = Sep)) + xlab(&quot;Year&quot;) + ylab(&quot;September Rainfall (in)&quot;) Rainfall values fluctuate from one September to the next, but there does not appear to be a long-term trend. With time series data it is better to connect the values with lines rather than use points unless values are missing. Create a plot of the May values of the North Atlantic oscillation (NAO) with Year on the horizontal axis. Add appropriate axis labels. loc &lt;- &quot;http://myweb.fsu.edu/jelsner/temp/data/NAO.txt&quot; NAO.df &lt;- readr::read_table(file = loc) ggplot(NAO.df, aes(x = Year, y = May)) + geom_line() + xlab(&quot;Year&quot;) + ylab(&quot;North Atlantic Oscillation (s.d.)&quot;) Let’s return to the mpg data frame. The data frame contains different automobiles by who made it, the model, engine size, mileage, class, etc. names(mpg) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; &quot;year&quot; &quot;cyl&quot; ## [6] &quot;trans&quot; &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; &quot;fl&quot; ## [11] &quot;class&quot; Let’s start with a scatter plot showing highway mileage on the vertical axis and engine size on the horizontal axis. ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) You add a third variable, like class, to a two dimensional scatterplot by mapping it to an aesthetic. An aesthetic is a visual property of the objects in our plot. Aesthetics include things like the size, the shape, or the color of our points. You can display a point in different ways by changing the levels of its aesthetic properties (e.g., changing the level by size, color, type). For example, you map the colors of our points to the class variable to reveal the class of each car. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) To map an aesthetic to a variable, associate the name of the aesthetic to the name of the variable inside aes(). Note in the previous plot color = was specified outside aes(). ggplot() will automatically assign a unique level of the aesthetic (here a unique color) to each unique value of the variable, a process known as scaling. ggplot() will also add a legend that explains which levels correspond to which values. The colors show that many of the unusual points are two-seater cars. Sports cars have large engines like SUVs and pickup trucks, but small bodies like midsize and compact cars, which improves their gas mileage. Facets One way to add additional variables is with aesthetics. Another way, particularly useful for categorical variables, is to split our plot into facets, subplots that each display one subset of the data. To facet a plot by a single variable, use facet_wrap(). The first argument of facet_wrap() should be a formula, which you create with ~ (tilde) followed by a variable name (here ‘formula’ is the name of a data structure in R, not a synonym for ‘equation’). The variable that you pass to facet_wrap() should be discrete. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) To facet a plot on the combination of two variables, add facet_grid() to the plot call. The first argument of facet_grid() is also a formula. This time the formula should contain two variable names separated by a ~ with the first variable named varying in the vertical direction and the second varying in the horizontal direction. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl) Here drv refers to the drive train: front-wheel (f), rear-wheel (r) or 4-wheel (4). Example: Palmer penguins Let’s return to the penguins data set. You import it as a data frame using readr::read_csv() function. loc &lt;- &quot;https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv&quot; penguins &lt;- readr::read_csv(loc) ## Rows: 344 Columns: 8 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (3): species, island, sex ## dbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(penguins) ## # A tibble: 6 × 8 ## species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Adelie Torge… 39.1 18.7 181 3750 male ## 2 Adelie Torge… 39.5 17.4 186 3800 fema… ## 3 Adelie Torge… 40.3 18 195 3250 fema… ## 4 Adelie Torge… NA NA NA NA &lt;NA&gt; ## 5 Adelie Torge… 36.7 19.3 193 3450 fema… ## 6 Adelie Torge… 39.3 20.6 190 3650 male ## # … with 1 more variable: year &lt;dbl&gt; Here you will visualize the relationship between flipper_length_mm and body_mass_g with respect to each species. https://towardsdatascience.com/penguins-dataset-overview-iris-alternative-9453bb8c8d95 Start by creating a scatter plot with flipper length on the horizontal axis and body mass on the vertical axis. ggplot(data = penguins) + geom_point(aes(x = flipper_length_mm, y = body_mass_g)) ## Warning: Removed 2 rows containing missing values (geom_point). Next, make the color and shape of the points correspond to the species type. Use the colors “darkorange,” “purple,” “cyan4.” ggplot(data = penguins) + geom_point(aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = species)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) ## Warning: Removed 2 rows containing missing values (geom_point). Finally, separate the scatter plots by island. ggplot(data = penguins) + geom_point(aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = species)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + facet_wrap(~ island) ## Warning: Removed 2 rows containing missing values (geom_point). An expository graph Adding labels and titles turns an exploratory graph into an expository graph. Consider again the mpg dataset and plot highway mileage (hwy) as a function of engine size (displ) with the color of the point layer given by automobile class (class). ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + geom_smooth(se = FALSE) + labs(title = &quot;Fuel efficiency generally decreases with engine size&quot;) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; The graph title should summarize the main finding. Avoid titles that just describe what the plot is, e.g. “A scatter plot of engine displacement vs. fuel economy.” If you need to add more text use subtitles and captions. subtitle = adds additional detail in a smaller font beneath the title. caption = adds text at the bottom right of the plot, often used to describe the source of the data. ggplot(data = mpg, mapping = aes(displ, hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(se = FALSE) + labs(title = &quot;Fuel efficiency generally decreases with engine size&quot;, subtitle = &quot;Two seaters (sports cars) are an exception because of their light weight&quot;, caption = &quot;Data are from fueleconomy.gov&quot;) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Exporting your graph When you knit to HTML and a plot is produced it gets output as a png file in our project directory. You can use the Export button under the Plots tab. Or you can export the file directly using R code. Here the file gets put into our working directory. png(file = &quot;Test.png&quot;) p1 dev.off() Note that the function png() opens the device and the function dev.off() closes it. You list the files in your working directory with the command dir(). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
